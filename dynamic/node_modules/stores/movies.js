import dispatcher       from "dispatcher";
import { EventEmitter } from "events";
import map              from "lodash/collection/map";
import filter           from "lodash/collection/filter";
import sortBy           from "lodash/collection/sortBy";




let __movies = {};




class Store extends EventEmitter {
  constructor() {
    this.NS = "MOVIES";
  }

  broadcast() {
    this.emit(this.NS);
  }

  sub(fn) {
    this.on(this.NS, fn);
  }

  unsub(fn) {
    this.removeListener(this.ns, fn);
  }

  getMyList() {
    return sortBy(filter(__movies, "inList"), "addedToListAt");
  }

  getRecommendations() {
    return filter(__movies, "recommendation");
  }
}




let store = new Store();




Store.token = dispatcher.register(payload => {
  let {actionType, data, id} = payload;

  switch (actionType) {
    case "MOVIES::INIT":
      data.mylist.forEach(mergeOldMovieExtra({inList: true, addedToListAt: +new Date}));
      data.recommendations.forEach(mergeOldMovieExtra({recommendation: true}));
      store.broadcast();
      break;

    case "MOVIES::ADD_MOVIE_TO_MY_LIST":
      addToMyList(id);
      store.broadcast();
      break

    case "MOVIES::REMOVE_MOVIE_FROM_MY_LIST":
      removeFromMyList(id);
      store.broadcast();
      break;
  }
})




export default store;




function addToMyList(id) {
  __movies[id] = Object.assign({}, __movies[id], {inList: true, addedToListAt: +new Date});
}

function removeFromMyList(id) {
  __movies[id] = Object.assign({}, __movies[id], {inList: false});
}

function mergeOldMovieExtra(extra={}) {
  return function(movie) {
    let old    = __movies[movie.id];
    __movies[movie.id] = Object.assign({}, old, movie, extra);
  }
}
