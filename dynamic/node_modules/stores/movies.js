import dispatcher       from "dispatcher"
import { EventEmitter } from "events"
import map              from "lodash/collection/map"




let __movies          = new Map();
let __mylist          = new Set();
let __recommendations = new Set();




class Store extends EventEmitter {
  constructor() {
    this.NS = "MOVIES";
  }

  broadcast() { this.emit(this.NS) }
  sub(fn)     { this.on(this.NS, fn) }
  unsub(fn)   { this.removeListener(this.ns, fn) }

  getMyList()          { return getMoviesFromSet(__mylist) }
  getRecommendations() { return getMoviesFromSet(__recommendations) }
}




let store = new Store();




Store.token = dispatcher.register(payload => {
  let {actionType, data, id} = payload;

  switch (actionType) {
    case "MOVIES::INIT":
      data.mylist          .map(addMovie) .forEach(movie => addToMyList(movie.id))
      data.recommendations .map(addMovie) .forEach(movie => addToRecommendations(movie.id))
      store.broadcast();
      break;

    case "MOVIES::ADD_MOVIE_TO_MY_LIST":
      addToMyList(id);
      this.broadcast();
      break

    case "MOVIES::REMOVE_MOVIE_FROM_MY_LIST":
      removeFromMyList(id);
      store.broadcast();
      break;
  }
})




export default store;




function getMoviesFromSet(set) {
  return map(Array.from(set), id => __movies.get(id))
}

function addToMyList(id) {
  __mylist.add(id);
}

function addToRecommendations(id) {
  __recommendations.add(id);
}

function addMovie(movie) {
  __movies.set(movie.id, movie);
  return movie
}
